// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title IYDToken
 * @dev Interface for the YDToken contract.
 * We only need to define the functions that this contract will call.
 */
interface IYDToken {
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

/**
 * @title CoursePlatform
 * @dev This contract manages the creation and ownership of courses on the platform.
 * All transactions are settled using the YDToken.
 */
contract CoursePlatform is Ownable {
    // 引用 YDToken 合约的地址
    IYDToken public immutable ydToken;

    // 定义 Course 结构体，用于存储课程的核心链上信息
    struct Course {
        address creator; // 课程创建者的地址
        uint256 priceInYd; // 以 YD 代币计价的课程价格
    }

    // --- Mappings for data storage ---

    // 映射 1: 通过课程 ID (来自后端的 UUID) 查找课程信息
    mapping(uint256 => Course) public courses;

    // 映射 2: 记录一个地址是否拥有某个课程
    // mapping(courseId => mapping(studentAddress => hasOwnership))
    mapping(uint256 => mapping(address => bool)) public courseOwnership;

    // --- Events for off-chain indexing ---

    // 事件 1: 当一个新课程被创建时触发
    event CourseCreated(
        uint256 indexed courseId,
        address indexed creator,
        uint256 priceInYd
    );

    // 事件 2: 当一个课程被购买时触发
    event CoursePurchased(
        uint256 indexed courseId,
        address indexed student,
        address indexed creator
    );

    /**
     * @dev Sets the address of the YDToken contract. This is done once at deployment.
     * @param _ydTokenAddress The deployed address of the YDToken contract.
     */
    constructor(
        address _ydTokenAddress,
        address initialOwner
    ) Ownable(initialOwner) {
        require(
            _ydTokenAddress != address(0),
            "CoursePlatform: Invalid YDToken address"
        );
        ydToken = IYDToken(_ydTokenAddress);
    }

    /**
     * @dev Allows a creator to register a new course on the blockchain.
     * The _courseId is a unique identifier generated by the off-chain backend.
     * @param _courseId The unique ID for the course.
     * @param _priceInYd The price of the course in YD tokens.
     */
    function createCourse(uint256 _courseId, uint256 _priceInYd) external {
        // 确保课程 ID 未被使用
        require(
            courses[_courseId].creator == address(0),
            "CoursePlatform: Course ID already exists."
        );
        // 价格必须大于 0
        require(
            _priceInYd > 0,
            "CoursePlatform: Price must be greater than zero."
        );

        // 在链上存储课程信息
        courses[_courseId] = Course({
            creator: msg.sender,
            priceInYd: _priceInYd
        });

        // 默认将课程所有权授予创建者
        courseOwnership[_courseId][msg.sender] = true;

        // 触发事件，以便 The Graph 等链下服务可以索引此信息
        emit CourseCreated(_courseId, msg.sender, _priceInYd);
    }

    /**
     * @dev Allows a student to purchase a course.
     * IMPORTANT: The student must have first called the `approve` function on the
     * YDToken contract, authorizing this CoursePlatform contract to spend
     * at least the course's price on their behalf.
     * @param _courseId The ID of the course to purchase.
     */
    function purchaseCourse(uint256 _courseId) external {
        Course storage courseToPurchase = courses[_courseId];

        // 检查 1: 课程必须存在
        require(
            courseToPurchase.creator != address(0),
            "CoursePlatform: Course does not exist."
        );
        // 检查 2: 用户不能重复购买
        require(
            !courseOwnership[_courseId][msg.sender],
            "CoursePlatform: You already own this course."
        );

        address creator = courseToPurchase.creator;
        uint256 price = courseToPurchase.priceInYd;

        // 核心步骤: 调用 YDToken 合约的 transferFrom 函数
        // 将 YD 代币从学生(msg.sender)账户直接转移到课程创建者(creator)账户
        bool success = ydToken.transferFrom(msg.sender, creator, price);
        require(success, "CoursePlatform: YD token transfer failed.");

        // 更新链上所有权记录
        courseOwnership[_courseId][msg.sender] = true;

        // 触发购买成功事件
        emit CoursePurchased(_courseId, msg.sender, creator);
    }
}
